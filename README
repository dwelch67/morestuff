
Yet another attempt at baremetal.

I have attempted to start this many times, will see if I make it this
time.  Aiming for a Python the Hard Way type approach, for the most
part there will just be working code, and maybe a few comments describing
or showing the output.  How and why it worked is mostly on you to read
the documentation to understand what I am doing.

Baremetal (bare-metal, bare metal) programming means no operating system
dont get confused by what the cloud community is calling baremetal
(somewhat incorrectly as they are adding at least one operating system
rather than getting rid of all of them).  Used to be all programming
was baremetal or a lot of it, today we mostly only see it practiced
in microcontrollers as far as products go.  We will be writing programs
to boot the chip from reset, directly access peripherals to make them
do things.

Why bother?  Various reasons, fun, freedom, performance (sometimes
but sometimes you are not as good as you think), program size,
etc.  Why not just use the libraries provided or some RTOS that has
been ported?  I highly recommend you try those things too.  Each vendor
or third party solution is different, some may be more tailored to
you than others.  But I recommend you try various solutions and vendors
one chip company may make your life easier than another.  But to stay
in business they need to keep these things fresh so the libraries, etc
change over time as well as the employees used to make them.

The chip vendor employees or contractors know what they are doing
better than we do right?  Well not necessarily here is an example of
some real chip vendor code:

/* We can only erase on 4KB boundaries */
while (addr & 0xFFF)
{
    addr--;
}

Very disturbing...

At the end of the day if you are making alarm clocks or tv remote
controls by the millions, it is partially your responsibility to get
this software right, ideally never to need to be touched again once
production starts.  If you wrote 100 lines of code and relied on
100,000 lines of someone elses code, and you didnt read through it
but will your boss care when the products fail mid production.  When
the schedule slips and the price per unit goes up having to replace
one time programmbales or re-run them through a fixture to upgrade
the firmware you were responsible for.  Writing it yourself you can
fail, relying too much on others you can fail, there is no right answer
but at least be professional enough to read through the stuff you are
using and somewhat own it.

These tutorials are my pay-it-forward for the folks who have left code
and information that got me to this point.  I have and can work on
chips at the HDL level, have written and run code to test chips in sim
pre-silicon, post silicon, bootloaders, etc.  The whole range, which
not a lot of folks get to do.  I have been very very lucky.  So
while you may hate my self-taught programming style, I still have
decades of experience that you can pick a nibble here or there from.

Just like diving into a chip vendors solution with their gui tools on
their chosen supported operating system and so on to get the full
experience of that solution, you should dive into what I have presented
here.  Tolerate it just enough to pick out nuggets of information.

I have zero interest in making libraries or one program that does
everything (one size fits all fits no-one well) these are isolated,
standalone, examples.  Take what you need, but I expect you to eventually
make your own with all/some/or a none of mine as a baseline.

Someone has to know how this stuff works in order to keep computing
going.  Without folks at this level there cant be new chips, there
cant be new phones with new chips (Who is going to write the DDR init?
Who is going to write the bootloader, etc?), and we cant create and
maintain compilers.  There may be one of us per N companies or maybe
one of us per every 100,000 developers, but you can if you want be that
one of us.  The primary benefit is freedom, usually the only rules we
have to conform to are that the code has to work with the logic, hand
in hand as a team.  Beyond that it is on you, language, coding style,
etc.  You are not on an operating system so from the start you are
violating at least some rules of the language or other.

So if baremetal this is not an interested to you then move on find
some other fun thing to read or try.

Around zero percent of baremetal programming is about programming.
Almost all of it is about reading documentation and interpreting it.
Assume that all documentations wrong in that at least a little bit or
a lot of it is wrong, usually a little bit.  The folks that write the
documentation are rarely the folks that know the product at that level.
You might have docs from the best technical writers on the planet but
they are getting their information directly or through various layers
of hearsay between the designers of a block or programmers sucessfully
programming that block.  Expect there to be errors, expect them to
trip you up, and expect to have to hack your way through.  Expect the
example programs to not be written specifically for that chip, there
will be code that sets or clears bits not in the documentation you have,
is that because it is an undocumented secret or because it is a bit
used in a chip designed before or after this one where the bit is used
and this code is generic, or some other answer?

IMO never write thousands of lines of code at a time without running
them.  I tend to write a few to a few dozen at a time and run
them, repeat.  If the hardware is not ready for 6 months and the
software is due in 8 I will wait the 6 months for the hardware and do
all the software in the two months, can get more debugged code written
at a few lines of code at a time, than to try to write it all up front
without something real to run against.  When you have tens of thousands
of lines of code against a new design, debugging is exponetially longer.
Sometimes there are tools that can help, but no single one of them is
perfect, all have flaws and there are bugs that any particular debug
tool cannot find.  The docs are always a little bit wrong, and if you
write a lot of code against the docs without the hardware that is
a needle in the haystack to find. YMMV.

Start with t00 and work your way numerically up from there, dont
expect these to be linear or sequential, I will probably skip some
numbers.

Unfortunately the nature of the beast is the boards and chips available
today are not going to be available forever, some will, some wont I
dont want you to have to solder or design boards and have them built
so that actually increases the problem.  The chips will often be
available for many many years, sometimes a decade or more, while the
evaluation boards used to get customers to design in that chip, are
relatively short lived.  So if I expected you to solder a particular
chip example might have a longer life as you could still get that
chip and build a board that would work for the example.  So, you will
want to buy one some of these boards in order to move forward.  Depending
on the price I often buy at least two, because every so often, no matter
how much experience you have you end up bricking one or letting some
smoke out from time to time.  There is also the cost of shipping too, I
hate that when buying a $10 board you end up with $8 in shipping, so
buy two and the shipping per board cuts in half, but you overal spent
more money $28 instead of $18 but you feel less ripped off...

With time and more tools that you need to buy, and taking the risk of
getting scammed, there are a number of $2 items on ebay from asia that
you can use for your projects or learning.  But we need to work our
way up to that, each little problem has the potential for complete
failure for some individual.  And what I hate to see is an individual
that has the potential giving up, and not just giving up but giving
up in a way that they preach that this form of programming or whatever
is bad and evil and should never be done.  Simply because they got
trapped in something and couldnt get out of that was probably not as
bad as they thought, just needed a nudge.  We have all been through
this and know the value of making it through something.  Sure we cannot
all pilot a helicopter, a fair percentage of us would crash and burn,
but some of the best pilots had a few mistakes they had to work through
maybe a crash or two, but didnt give up, found help or figured it out.
This approach will hopefully get you through by going relatively slow
ideally portable and simple code, not overly ghee-whiz with the language
or the tools. keep it simple stupid.

I have been overly verbose here and in the next README, but very quickly
it may be almost nothing but the code and some comments on the expected
output.  It is then on you to read the documentation to see where I
found the addresses or bits I am messing with and reading what they
do.

Some chip vendors docs are better than others, some boards are better
than others, depending of course on what you define better to mean.
Right now st.com is a big player in the MCU market and they have a
huge number of boards to play with.  ti.com has always been there too
and have a few boards, and we may touch on those, I struggle to pick
the first and second and Nth board to talk through as there are many
good candidates.  Even starting with cortex-m is a choice and I hope
to venture off into other perfectly adequate processors and chips.
There are reasons why these different choices are all available to us
right now, one chip or vendor has not completely replaced all others,
each fairly sucessful product has value, and for us each of those has
something for us to learn.  If you are/were a computer scientist you
might have learned a number of languages with the idea of choosing the
right language for the task.  Well I can fumble through languages other
than C, do know many assembly languages and instruction sets.  But think
of this as there are a number of perfectly good MCUs out there and
picking the right one for the job, and not necessarily limiting yourself
to one brand or product or family.
